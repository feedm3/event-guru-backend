service: event-guru-backend

package:
  individually: true
  exclude:
    - test
    - docs

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: eu-west-1
  memorySize: 512
  cfLogs: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.vars.EVENT_GURU_EVENTS_CACHE_TABLE}'

custom:
  vars: ${file(./src/config/config.json)}

plugins:
  - serverless-webpack

resources:
  Resources:
    EventGuruEventsCacheTable:
          Type: 'AWS::DynamoDB::Table'
          DeletionPolicy: Retain
          Properties:
            AttributeDefinitions:
              -
                AttributeName: location
                AttributeType: S
            KeySchema:
              -
                AttributeName: location
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
            TableName: ${self:custom.vars.EVENT_GURU_EVENTS_CACHE_TABLE}

    EventGuruBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.vars.EVENT_GURU_BUCKET}
        AccessControl: PublicReadWrite
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - http://ask-ifr-download.s3.amazonaws.com
              - https://eventguru.io

    EventGuruBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: EventGuruBucket
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Principal: '*'
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: EventGuruBucket
                    - '/*'

functions:
  # http rest interface
  events-rest-api:
    handler: src/lambda/events-rest-handler.getEvents
    description: Event Guru - REST API
    events:
      - http:
          path: events
          method: get
          request:
            parameters:
              querystrings:
                location: true
                page: true
                pageSize: false

  # cron job to preload events
  events-preload:
    handler: src/lambda/events-preload-handler.run
    description: Event Guru - CronJob Event Preloader
    timeout: 600s
    events:
      - schedule: cron(1 0 * * ? *) # 00:01 every midnight
